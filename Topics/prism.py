'''
This code presents a general approach for implementing the gravitational
potential and vertical component of the gravitational acceleration produced
by a rectangular prism by using the analytical formulas of
Nagy et al (2000, 2002). This prototype is highly inspired on
[Harmonica](https://www.fatiando.org/harmonica/latest/index.html)
(Uieda et al, 2020). It makes use of the modified arctangent function proposed
by Fukushima (2020, eq. 72) and of a modified logarithm function for dealing
with singularities at some computation points.

References

* Nagy, D., Papp, G., and Benedek, J. (2000). The gravitational potential and
    its derivatives for the prism: Journal of Geodesy, 74, 552–560,
    http://doi.org/10.1007/s001900000116.
* Nagy, D., Papp, G., and Benedek, J. (2002). Corrections to "The gravitational
    potential and its derivatives for the prism": Journal of Geodesy, 76, 475,
    http://doi.org/10.1007/s00190-002-0264-7
* Fukushima, T. (2020). Speed and accuracy improvements in standard algorithm
    for prismatic gravitational field. Geophysical Journal International,
    222(3), 1898–1908. http://doi.org/10.1093/gji/ggaa240
* Uieda, Leonardo, Soler, Santiago R., Pesce, Agustina, Oliveira Jr,
    Vanderlei C, and Shea, Nicholas. (2020, February 27). Harmonica: Forward
    modeling, inversion, and processing gravity and magnetic data
    (Version v0.1.0). Zenodo. http://doi.org/10.5281/zenodo.3628742
'''


import numpy as np
from numba import jit


#: The gravitational constant in m^3 kg^{-1} s^{-1}
GRAVITATIONAL_CONST = 0.00000000006673


def gravitational(coordinates, prisms, density, field):
    """
    Gravitational potential and vertical component of the gravitational acceleration
    produced by a right-rectangular prism in Cartesian coordinates.
    All values are referred to a topocentric Cartesian system with axes
    x, y and z pointing to north, east and down, respectively.

    Parameters
    ----------
    coordinates : 2d-array
        2d-array containing y (first line), x (second line), and z (third line) of
        the computation points. All coordinates should be in meters.
    prisms : 2d-array
        2d-array containing the coordinates of the prisms. Each line must contain
        the coordinates of a single prism in the following order:
        west, east, south, north, top and bottom.
        All coordinates should be in meters.
    density : 1d-array
        1d-array containing the density of each prism in kg/m^3.
    field : str
        Gravitational field to be computed.
        The available fields are:

        - Gravitational potential: ``potential``
        - z-component of acceleration: ``g_z``

    Returns
    -------
    result : array
        Gravitational field generated by the prisms at the computation points.


    """

    # Available fields
    kernels = {
        "potential": kernel_potential,
        "g_z": kernel_g_z,
        "g_x": kernel_g_x
    }

    # Verify the field
    if field not in kernels:
        raise ValueError("Gravitational field {} not recognized".format(field))

    # Verify the input parameters
    coordinates = np.array(coordinates)
    prisms = np.array(prisms)
    density = np.array(density)

    if coordinates.ndim != 2:
        raise ValueError(
            "coordinates ndim ({}) ".format(coordinates.ndim)
            + "not equal to 2"
        )
    if coordinates.shape[0] != 3:
        raise ValueError(
            "Number of lines in coordinates ({}) ".format(coordinates.shape[0])
            + "not equal to 3"
        )
    if prisms.ndim != 2:
        raise ValueError(
            "prisms ndim ({}) ".format(prisms.ndim)
            + "not equal to 2"
        )
    if prisms.shape[1] != 6:
        raise ValueError(
            "Number of columns in prisms ({}) ".format(prisms.shape[1])
            + "not equal to 6"
        )
    if density.ndim != 1:
        raise ValueError(
            "density ndim ({}) ".format(density.ndim)
            + "not equal to 1"
        )
    if density.size != prisms.shape[0]:
        raise ValueError(
            "Number of elements in density ({}) ".format(density.size)
            + "mismatch the number of prisms ({})".format(prisms.shape[0])
        )

    _check_prisms(prisms)

    # create the array to store the result
    result = np.zeros(coordinates[0].size, dtype="float64")

    # Compute gravitational field
    jit_gravitational(coordinates, prisms, density, kernels[field], result)
    result *= GRAVITATIONAL_CONST
    # Convert from m/s^2 to mGal
    if field in ["g_x", "g_z"]:
        result *= 1e5
    return result


def _check_prisms(prisms):
    """
    Check if prisms boundaries are well defined

    Parameters
    ----------
    prisms : 2d-array
        Array containing the boundaries of the prisms in the following order:
        ``w``, ``e``, ``s``, ``n``, ``top``, ``bottom``.
        The array must have the following shape: (``n_prisms``, 6), where
        ``n_prisms`` is the total number of prisms.
        This array of prisms must have valid boundaries.
        Run ``_check_prisms`` before.
    """
    west, east, south, north, top, bottom = tuple(prisms[:, i] for i in range(6))
    err_msg = "Invalid prism or prisms. "
    bad_we = west > east
    bad_sn = south > north
    bad_bt = top > bottom
    if bad_we.any():
        err_msg += "The west boundary can't be greater than the east one.\n"
        for prism in prisms[bad_we]:
            err_msg += "\tInvalid prism: {}\n".format(prism)
        raise ValueError(err_msg)
    if bad_sn.any():
        err_msg += "The south boundary can't be greater than the north one.\n"
        for prism in prisms[bad_sn]:
            err_msg += "\tInvalid prism: {}\n".format(prism)
        raise ValueError(err_msg)
    if bad_bt.any():
        err_msg += "The top boundary can't be greater than the bottom one.\n"
        for prism in prisms[bad_bt]:
            err_msg += "\tInvalid prism: {}\n".format(prism)
        raise ValueError(err_msg)


@jit(nopython=True)
def jit_gravitational(coordinates, prisms, density, kernel, out):
    """
    Compute gravitational field at the computations points
    """
    # Iterate over computation points
    for l in range(coordinates[0].size):
        # Iterate over prisms
        for m in range(prisms.shape[0]):
            # Iterate over the prism boundaries
            for i in range(2,0,-1):
                for j in range(2,0,-1):
                    for k in range(2,0,-1):
                        Y = prisms[m, -1 + j] - coordinates[0, l]
                        X = prisms[m, 1 + i] - coordinates[1, l]
                        Z = prisms[m, 3 + k] - coordinates[2, l]
                        out[l] += (
                            density[m]
                            * (-1) ** (i + j + k)
                            * kernel(Y, X, Z)
                        )

@jit(nopython=True)
def kernel_potential(Y, X, Z):
    """
    Kernel function for potential gravitational field generated by a prism
    """
    radius = np.sqrt(Y ** 2 + X ** 2 + Z ** 2)
    kernel = (
        Y * X * safe_log(Z + radius)
        + X * Z * safe_log(Y + radius)
        + Y * Z * safe_log(X + radius)
        - 0.5 * Y ** 2 * safe_atan2(Z * X, Y * radius)
        - 0.5 * X ** 2 * safe_atan2(Z * Y, X * radius)
        - 0.5 * Z ** 2 * safe_atan2(Y * X, Z * radius)
    )
    return kernel


@jit(nopython=True)
def kernel_g_z(Y, X, Z):
    """
    Kernel for downward component of gravitational acceleration of a prism
    """
    radius = np.sqrt(Y ** 2 + X ** 2 + Z ** 2)
    kernel = -(
        Y * safe_log(X + radius)
        + X * safe_log(Y + radius)
        - Z * safe_atan2(Y * X, Z * radius)
    )
    return kernel


@jit(nopython=True)
def kernel_g_x(Y, X, Z):
    """
    Kernel for x component of gravitational acceleration of a prism
    """
    radius = np.sqrt(Y ** 2 + X ** 2 + Z ** 2)
    kernel = -(
        Y * safe_log(Z + radius)
        + Z * safe_log(Y + radius)
        - X * safe_atan2(Y * Z, X * radius)
    )
    return kernel


@jit(nopython=True)
def safe_atan2(y, x):
    """
    Principal value of the arctangent expressed as a two variable function

    This modification has to be made to the arctangent function so the
    gravitational field of the prism satisfies the Poisson's equation.
    Therefore, it guarantees that the fields satisfies the symmetry properties
    of the prism. This modified function has been defined according to
    Fukushima (2020, eq. 72).
    """
    if x != 0:
        result = np.arctan(y / x)
    else:
        if y > 0:
            result = np.pi / 2
        elif y < 0:
            result = -np.pi / 2
        else:
            result = 0
    return result


@jit(nopython=True)
def safe_log(x):
    """
    Modified log to return 0 for log(0).
    The limits in the formula terms tend to 0.
    """
    if np.abs(x) < 1e-10:
        result = 0
    else:
        result = np.log(x)
    return result
